/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "cli_service_constants.h"

namespace apache { namespace hive { namespace service { namespace cli { namespace thrift {

const cli_serviceConstants g_cli_service_constants;

cli_serviceConstants::cli_serviceConstants() {
  PRIMITIVE_TYPES.insert((TType::type)0);
  PRIMITIVE_TYPES.insert((TType::type)1);
  PRIMITIVE_TYPES.insert((TType::type)2);
  PRIMITIVE_TYPES.insert((TType::type)3);
  PRIMITIVE_TYPES.insert((TType::type)4);
  PRIMITIVE_TYPES.insert((TType::type)5);
  PRIMITIVE_TYPES.insert((TType::type)6);
  PRIMITIVE_TYPES.insert((TType::type)7);
  PRIMITIVE_TYPES.insert((TType::type)8);
  PRIMITIVE_TYPES.insert((TType::type)9);
  PRIMITIVE_TYPES.insert((TType::type)10);

  COMPLEX_TYPES.insert((TType::type)11);
  COMPLEX_TYPES.insert((TType::type)12);
  COMPLEX_TYPES.insert((TType::type)13);
  COMPLEX_TYPES.insert((TType::type)14);
  COMPLEX_TYPES.insert((TType::type)15);

  COLLECTION_TYPES.insert((TType::type)11);
  COLLECTION_TYPES.insert((TType::type)12);

  TYPE_NAMES.insert(std::make_pair((TType::type)0, "VOID"));
  TYPE_NAMES.insert(std::make_pair((TType::type)1, "BOOLEAN"));
  TYPE_NAMES.insert(std::make_pair((TType::type)2, "TINYINT"));
  TYPE_NAMES.insert(std::make_pair((TType::type)3, "SMALLINT"));
  TYPE_NAMES.insert(std::make_pair((TType::type)4, "INT"));
  TYPE_NAMES.insert(std::make_pair((TType::type)5, "BIGINT"));
  TYPE_NAMES.insert(std::make_pair((TType::type)6, "FLOAT"));
  TYPE_NAMES.insert(std::make_pair((TType::type)7, "DOUBLE"));
  TYPE_NAMES.insert(std::make_pair((TType::type)8, "STRING"));
  TYPE_NAMES.insert(std::make_pair((TType::type)9, "TIMESTAMP"));
  TYPE_NAMES.insert(std::make_pair((TType::type)10, "BINARY"));
  TYPE_NAMES.insert(std::make_pair((TType::type)11, "ARRAY"));
  TYPE_NAMES.insert(std::make_pair((TType::type)12, "MAP"));
  TYPE_NAMES.insert(std::make_pair((TType::type)13, "STRUCT"));
  TYPE_NAMES.insert(std::make_pair((TType::type)14, "UNIONTYPE"));
  TYPE_NAMES.insert(std::make_pair((TType::type)15, "USER_DEFINED"));

}

}}}}} // namespace

